Index: app/src/main/java/com/sm19003564/omnimarkerza/MapsActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sm19003564.omnimarkerza;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.fragment.app.FragmentActivity;\r\n\r\nimport android.Manifest;\r\nimport android.content.pm.PackageManager;\r\nimport android.graphics.Point;\r\nimport android.location.Address;\r\nimport android.location.Geocoder;\r\nimport android.location.Location;\r\n\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.KeyEvent;\r\nimport android.view.View;\r\nimport android.view.inputmethod.EditorInfo;\r\nimport android.widget.AutoCompleteTextView;\r\nimport android.widget.EditText;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.google.android.gms.common.ConnectionResult;\r\nimport com.google.android.gms.common.api.GoogleApiClient;\r\nimport com.google.android.gms.location.LocationRequest;\r\nimport com.google.android.gms.location.LocationServices;\r\nimport com.google.android.gms.location.places.GeoDataClient;\r\nimport com.google.android.gms.location.places.PlaceDetectionClient;\r\nimport com.google.android.gms.location.places.Places;\r\nimport com.google.android.gms.maps.CameraUpdateFactory;\r\nimport com.google.android.gms.maps.GoogleMap;\r\nimport com.google.android.gms.maps.OnMapReadyCallback;\r\nimport com.google.android.gms.location.LocationListener;\r\nimport com.google.android.gms.maps.SupportMapFragment;\r\nimport com.google.android.gms.maps.model.BitmapDescriptor;\r\nimport com.google.android.gms.maps.model.BitmapDescriptorFactory;\r\nimport com.google.android.gms.maps.model.LatLng;\r\nimport com.google.android.gms.maps.model.LatLngBounds;\r\nimport com.google.android.gms.maps.model.Marker;\r\nimport com.google.android.gms.maps.model.MarkerOptions;\r\n\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class MapsActivity extends FragmentActivity implements OnMapReadyCallback,\r\n        GoogleApiClient.ConnectionCallbacks,\r\n        GoogleApiClient.OnConnectionFailedListener,\r\n        LocationListener,\r\n        GoogleMap.OnMarkerClickListener,\r\n        GoogleMap.OnMarkerDragListener{\r\n\r\n    private GoogleMap mMap;\r\n    View mapView;\r\n    private GoogleApiClient client;\r\n    private GoogleApiClient mGoogleApiClient;\r\n    private LocationRequest locationRequest;\r\n    private Location lastLocation;\r\n    private Marker currentLocationmMarker;\r\n    int PROXIMITY_RADIUS = 10000;\r\n    double latitude, longitude;\r\n    double end_latitude, end_longitude;\r\n\r\n    //widgets\r\n    private AutoCompleteTextView mSearchText;\r\n    //\r\n    private PlaceAutocompleteAdapter placeAutocompleteAdapter;\r\n    private static final LatLngBounds LAT_LNG_BOUNDS = new LatLngBounds( new LatLng(-40, -168), new LatLng(71, 136));\r\n    public static final int REQUEST_LOCATION_CODE = 99;\r\n    private static final String FINE_LOCATION = Manifest.permission.ACCESS_FINE_LOCATION;\r\n    private static final String COURSE_LOCATION = Manifest.permission.ACCESS_COARSE_LOCATION;\r\n\r\n    private static final int LOCATION_PERMISSION_REQUEST_CODE = 1234;\r\n    private static final String TAG = \"MapsActivity\";\r\n    private Boolean mLocationPermissionsGranted = false;\r\n    private PlaceDetectionClient mPlaceDetectionClient;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_maps);\r\n\r\n        mSearchText = findViewById(R.id.etLocation);\r\n        getLocationPermission();\r\n\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)\r\n        {\r\n            checkLocationPermissions();\r\n\r\n        }\r\n        // Obtain the SupportMapFragment and get notified when the map is ready to be used.\r\n        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()\r\n                .findFragmentById(R.id.map);\r\n        mapView = mapFragment.getView();\r\n        mapFragment.getMapAsync(this);\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    private void init()\r\n    {\r\n        Log.d(TAG, \"init: initializing\");\r\n\r\n\r\n\r\n\r\n\r\n\r\n        mGoogleApiClient = new GoogleApiClient\r\n                .Builder(this)\r\n                .addApi(Places.GEO_DATA_API)\r\n                .addApi(Places.PLACE_DETECTION_API)\r\n                .enableAutoManage(this, this)\r\n                .build();\r\n        placeAutocompleteAdapter = new PlaceAutocompleteAdapter(this, client, LAT_LNG_BOUNDS, null);\r\n        mSearchText.setAdapter(placeAutocompleteAdapter);\r\n        mSearchText.setOnEditorActionListener(new TextView.OnEditorActionListener() {\r\n            @Override\r\n            public boolean onEditorAction(TextView textView, int actionId, KeyEvent keyEvent) {\r\n                if(actionId == EditorInfo.IME_ACTION_SEARCH\r\n                        || actionId == EditorInfo.IME_ACTION_DONE\r\n                        || keyEvent.getAction() == KeyEvent.ACTION_DOWN\r\n                        || keyEvent.getAction() == KeyEvent.KEYCODE_ENTER){\r\n                    //execute method for searching\r\n                    geoLocate();\r\n                }\r\n\r\n                return false;\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n    private void geoLocate(){\r\n        Log.d(TAG, \"geoLocate: geo-locating\");\r\n        String searchString = mSearchText.getText().toString();\r\n        if(!searchString.equals(\"\"))\r\n        {\r\n            Geocoder geocoder = new Geocoder(MapsActivity.this);\r\n            List<Address> addressList = new ArrayList<>();\r\n            try{\r\n                addressList = geocoder.getFromLocationName(searchString, 1);\r\n            }catch (IOException e){\r\n                Log.e(TAG, \"geoLocate: IOException: \" + e.getMessage() );\r\n            }\r\n\r\n            if(addressList != null)\r\n            {\r\n                mMap.clear();\r\n                for(int i = 0;i<addressList.size();i++)\r\n                {\r\n                    LatLng latLng = new LatLng(addressList.get(i).getLatitude() , addressList.get(i).getLongitude());\r\n                    MarkerOptions markerOptions = new MarkerOptions();\r\n                    markerOptions.position(latLng);\r\n                    markerOptions.title(addressList.get(i).getAddressLine(0));\r\n                    mMap.addMarker(markerOptions);\r\n                    mMap.moveCamera(CameraUpdateFactory.newLatLng(latLng));\r\n                    mMap.animateCamera(CameraUpdateFactory.zoomTo(10));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onMapReady(GoogleMap googleMap) {\r\n        mMap = googleMap;\r\n\r\n        if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {\r\n            if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED) {\r\n                buildGoogleApiClient();\r\n                mMap.setMyLocationEnabled(true);\r\n                init();\r\n            }\r\n        }\r\n\r\n        mMap.setOnMarkerDragListener(this);\r\n        mMap.setOnMarkerClickListener(this);\r\n        if (mapView != null &&\r\n                mapView.findViewById(Integer.parseInt(\"1\")) != null) {\r\n            // Get the button view\r\n            View locationButton = ((View) mapView.findViewById(Integer.parseInt(\"1\")).getParent()).findViewById(Integer.parseInt(\"2\"));\r\n            // and next place it, on bottom right (as Google Maps app)\r\n            RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams)\r\n                    locationButton.getLayoutParams();\r\n            // position on right bottom\r\n            layoutParams.addRule(RelativeLayout.ALIGN_PARENT_TOP, 0);\r\n            layoutParams.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM, RelativeLayout.TRUE);\r\n            layoutParams.setMargins(0, 0, 30, 30);\r\n        }\r\n    }\r\n\r\n    public void onClick(View v)\r\n    {\r\n        Object dataTransfer[] = new Object[2];\r\n        GetNearbyPlacesData getNearbyPlacesData = new GetNearbyPlacesData();\r\n\r\n        switch(v.getId())\r\n        {\r\n\r\n            case R.id.btnHospitals:\r\n                mMap.clear();\r\n                String hospital = \"hospital\";\r\n                String url = getUrl(latitude, longitude, hospital);\r\n                dataTransfer[0] = mMap;\r\n                dataTransfer[1] = url;\r\n\r\n                getNearbyPlacesData.execute(dataTransfer);\r\n                Toast.makeText(MapsActivity.this, \"Showing Nearby Hospitals\", Toast.LENGTH_SHORT).show();\r\n                break;\r\n\r\n\r\n            case R.id.btnStatues:\r\n                mMap.clear();\r\n                String statues = \"statues\";\r\n                url = getUrl(latitude, longitude, statues);\r\n                dataTransfer[0] = mMap;\r\n                dataTransfer[1] = url;\r\n\r\n                getNearbyPlacesData.execute(dataTransfer);\r\n                Toast.makeText(MapsActivity.this, \"Showing Nearby Schools\", Toast.LENGTH_SHORT).show();\r\n                break;\r\n            case R.id.btnRestaurants:\r\n                mMap.clear();\r\n                String restaurant = \"restaurant\";\r\n                url = getUrl(latitude, longitude, restaurant);\r\n                dataTransfer[0] = mMap;\r\n                dataTransfer[1] = url;\r\n\r\n                getNearbyPlacesData.execute(dataTransfer);\r\n                Toast.makeText(MapsActivity.this, \"Showing Nearby Restaurants\", Toast.LENGTH_SHORT).show();\r\n                break;\r\n            case R.id.btnTo:\r\n                dataTransfer = new Object[3];\r\n                url = getDirectionsUrl();\r\n                GetDirectionsData getDirectionsData = new GetDirectionsData();\r\n                dataTransfer[0] = mMap;\r\n                dataTransfer[1] = url;\r\n                dataTransfer[2] = new LatLng(end_latitude, end_longitude);\r\n                getDirectionsData.execute(dataTransfer);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private String getDirectionsUrl()\r\n    {\r\n        StringBuilder googleDirectionUrl = new StringBuilder(\"https://maps.googleapis.com/maps/api/directions/json?\");\r\n        googleDirectionUrl.append(\"origin=\"+latitude+\",\"+longitude);\r\n        googleDirectionUrl.append(\"&destination=\"+end_latitude+\",\"+end_longitude);\r\n        googleDirectionUrl.append(\"&key=\"+\"AIzaSyAaWsbwDvVA7Z8gtBZR7oJl8ASqNCnAkqU\");\r\n\r\n        return googleDirectionUrl.toString();\r\n    }\r\n\r\n    private String getUrl(double latitude , double longitude , String nearbyPlace)\r\n    {\r\n\r\n        StringBuilder googlePlaceUrl = new StringBuilder(\"https://maps.googleapis.com/maps/api/place/nearbysearch/json?\");\r\n        googlePlaceUrl.append(\"location=\"+latitude+\",\"+longitude);\r\n        googlePlaceUrl.append(\"&radius=\"+PROXIMITY_RADIUS);\r\n        googlePlaceUrl.append(\"&type=\"+nearbyPlace);\r\n        googlePlaceUrl.append(\"&sensor=true\");\r\n        googlePlaceUrl.append(\"&key=\"+getString(R.string.google_maps_key));\r\n\r\n        Log.d(\"MapsActivity\", \"url = \"+googlePlaceUrl.toString());\r\n\r\n        return googlePlaceUrl.toString();\r\n    }\r\n\r\n\r\n\r\n\r\n    protected synchronized void buildGoogleApiClient() {\r\n        client = new GoogleApiClient.Builder(this)\r\n                .addConnectionCallbacks(this)\r\n                .addOnConnectionFailedListener(this)\r\n                .addApi(LocationServices.API).build();\r\n        client.connect();\r\n\r\n    }\r\n\r\n\r\n    private void getLocationPermission() {\r\n        String[] permissions = {Manifest.permission.ACCESS_FINE_LOCATION,\r\n                Manifest.permission.ACCESS_COARSE_LOCATION};\r\n\r\n        if(ContextCompat.checkSelfPermission(this.getApplicationContext(),\r\n                FINE_LOCATION)== PackageManager.PERMISSION_GRANTED) {\r\n            if(ContextCompat.checkSelfPermission(this.getApplicationContext(),\r\n                    COURSE_LOCATION)== PackageManager.PERMISSION_GRANTED) {\r\n                mLocationPermissionsGranted = true;\r\n            }\r\n            else\r\n            {\r\n                ActivityCompat.requestPermissions(this,\r\n                        permissions,\r\n                        LOCATION_PERMISSION_REQUEST_CODE);\r\n            }\r\n        }\r\n        else {\r\n            ActivityCompat.requestPermissions(this,\r\n                    permissions,\r\n                    LOCATION_PERMISSION_REQUEST_CODE);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        switch(requestCode)\r\n        {\r\n            case REQUEST_LOCATION_CODE:\r\n                if(grantResults.length >0 && grantResults[0] == PackageManager.PERMISSION_GRANTED)\r\n                {\r\n                    if(ContextCompat.checkSelfPermission(this,Manifest.permission.ACCESS_FINE_LOCATION) !=  PackageManager.PERMISSION_GRANTED)\r\n                    {\r\n                        if(client == null)\r\n                        {\r\n                            buildGoogleApiClient();\r\n                        }\r\n                        mMap.setMyLocationEnabled(true);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    Toast.makeText(this,\"Permission Denied\" , Toast.LENGTH_LONG).show();\r\n                }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onLocationChanged(Location location) {\r\n\r\n        latitude = location.getLatitude();\r\n        longitude = location.getLongitude();\r\n        lastLocation = location;\r\n        if(currentLocationmMarker != null)\r\n        {\r\n            currentLocationmMarker.remove();\r\n\r\n        }\r\n        Log.d(\"lat = \",\"\"+latitude);\r\n        LatLng latLng = new LatLng(location.getLatitude() , location.getLongitude());\r\n        MarkerOptions markerOptions = new MarkerOptions();\r\n        markerOptions.position(latLng);\r\n        markerOptions.title(\"Current Location\");\r\n        markerOptions.icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_GREEN));\r\n        currentLocationmMarker = mMap.addMarker(markerOptions);\r\n        mMap.moveCamera(CameraUpdateFactory.newLatLng(latLng));\r\n        mMap.animateCamera(CameraUpdateFactory.zoomBy(10));\r\n\r\n        if(client != null)\r\n        {\r\n            LocationServices.FusedLocationApi.removeLocationUpdates(client,this);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onConnected(@Nullable Bundle bundle) {\r\n\r\n        locationRequest = new LocationRequest();\r\n        locationRequest.setInterval(100);\r\n        locationRequest.setFastestInterval(1000);\r\n        locationRequest.setPriority(LocationRequest.PRIORITY_BALANCED_POWER_ACCURACY);\r\n\r\n\r\n        if(ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION ) == PackageManager.PERMISSION_GRANTED)\r\n        {\r\n            LocationServices.FusedLocationApi.requestLocationUpdates(client, locationRequest, this);\r\n        }\r\n    }\r\n\r\n\r\n    public boolean checkLocationPermissions()\r\n    {\r\n        if(ContextCompat.checkSelfPermission(this,Manifest.permission.ACCESS_FINE_LOCATION)  != PackageManager.PERMISSION_GRANTED )\r\n        {\r\n\r\n            if (ActivityCompat.shouldShowRequestPermissionRationale(this,Manifest.permission.ACCESS_FINE_LOCATION))\r\n            {\r\n                ActivityCompat.requestPermissions(this,new String[] {Manifest.permission.ACCESS_FINE_LOCATION },REQUEST_LOCATION_CODE);\r\n            }\r\n            else\r\n            {\r\n                ActivityCompat.requestPermissions(this,new String[] {Manifest.permission.ACCESS_FINE_LOCATION },REQUEST_LOCATION_CODE);\r\n            }\r\n            return false;\r\n\r\n        }\r\n        else\r\n            return true;\r\n    }\r\n\r\n    @Override\r\n    public void onConnectionSuspended(int i) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public boolean onMarkerClick(Marker marker) {\r\n        marker.setDraggable(true);\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public void onMarkerDragStart(Marker marker) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onMarkerDrag(Marker marker) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onMarkerDragEnd(Marker marker) {\r\n        end_latitude = marker.getPosition().latitude;\r\n        end_longitude = marker.getPosition().longitude;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/sm19003564/omnimarkerza/MapsActivity.java	(revision 83fa7f701a04ba5e3c63c6e6ceaa1154a6d1b8d1)
+++ app/src/main/java/com/sm19003564/omnimarkerza/MapsActivity.java	(date 1622985985221)
@@ -1,18 +1,10 @@
 package com.sm19003564.omnimarkerza;
 
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-import androidx.core.app.ActivityCompat;
-import androidx.core.content.ContextCompat;
-import androidx.fragment.app.FragmentActivity;
-
 import android.Manifest;
 import android.content.pm.PackageManager;
-import android.graphics.Point;
 import android.location.Address;
 import android.location.Geocoder;
 import android.location.Location;
-
 import android.os.Build;
 import android.os.Bundle;
 import android.util.Log;
@@ -20,29 +12,35 @@
 import android.view.View;
 import android.view.inputmethod.EditorInfo;
 import android.widget.AutoCompleteTextView;
-import android.widget.EditText;
 import android.widget.RelativeLayout;
 import android.widget.TextView;
 import android.widget.Toast;
 
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.core.app.ActivityCompat;
+import androidx.core.content.ContextCompat;
+import androidx.fragment.app.FragmentActivity;
+
 import com.google.android.gms.common.ConnectionResult;
 import com.google.android.gms.common.api.GoogleApiClient;
+import com.google.android.gms.location.LocationListener;
 import com.google.android.gms.location.LocationRequest;
 import com.google.android.gms.location.LocationServices;
-import com.google.android.gms.location.places.GeoDataClient;
 import com.google.android.gms.location.places.PlaceDetectionClient;
 import com.google.android.gms.location.places.Places;
 import com.google.android.gms.maps.CameraUpdateFactory;
 import com.google.android.gms.maps.GoogleMap;
 import com.google.android.gms.maps.OnMapReadyCallback;
-import com.google.android.gms.location.LocationListener;
 import com.google.android.gms.maps.SupportMapFragment;
-import com.google.android.gms.maps.model.BitmapDescriptor;
 import com.google.android.gms.maps.model.BitmapDescriptorFactory;
 import com.google.android.gms.maps.model.LatLng;
 import com.google.android.gms.maps.model.LatLngBounds;
 import com.google.android.gms.maps.model.Marker;
 import com.google.android.gms.maps.model.MarkerOptions;
+import com.google.firebase.auth.FirebaseAuth;
+import com.google.firebase.database.DatabaseReference;
+import com.google.firebase.database.FirebaseDatabase;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -65,6 +63,10 @@
     int PROXIMITY_RADIUS = 10000;
     double latitude, longitude;
     double end_latitude, end_longitude;
+    FirebaseDatabase database = FirebaseDatabase.getInstance();
+    DatabaseReference settingsRef = database.getReference(FirebaseAuth.getInstance().getCurrentUser().getUid());
+    FirebaseAuth mFirebaseAuth;
+
 
     //widgets
     private AutoCompleteTextView mSearchText;
@@ -86,6 +88,7 @@
         setContentView(R.layout.activity_maps);
 
         mSearchText = findViewById(R.id.etLocation);
+        mFirebaseAuth = FirebaseAuth.getInstance();
         getLocationPermission();
 
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)
@@ -429,4 +432,11 @@
         end_latitude = marker.getPosition().latitude;
         end_longitude = marker.getPosition().longitude;
     }
+
+    public void saveAsFavourite(String name, double latitude, double longitude) {
+        FavouriteLocationClass favourite = new FavouriteLocationClass(name, latitude, longitude);
+
+        settingsRef.child("FavouriteLocation").push().setValue(favourite);
+
+    }
 }
\ No newline at end of file
